version: "2"
services:

  # cassandra:
  #   image: cassandra:3.0.20
  #   volumes:
  #     - "./cassandra-init.sh:/cassandra-init.sh"
  #   command: "sh /cassandra-init.sh"
  #   ports:
  #     - "9042:9042"
  #   links:
  #     - connect

  elasticsearch:
    hostname: elasticsearch
    image: nshou/elasticsearch-kibana
    depends_on:
      - zookeeper
      - kafka
      - connect
    ports:
      - "9200:9200"
      - "5601:5601"
    links:
      - connect


  zookeeper:
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:5.0.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      zk_id: "1"

  kafka:
    hostname: kafka
    image: confluentinc/cp-kafka:5.0.0
    links:
      - zookeeper
    ports:
      #- "9092:9093"
      - "29092:29092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092"
      #KAFKA_ADVERTISED_LISTENERS: "OUTSIDE://localhost:9093,INSIDE://kafka:9092"
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "OUTSIDE:PLAINTEXT,INSIDE:PLAINTEXT"
      #KAFKA_INTER_BROKER_LISTEN_NAME: "INSIDE"
      #KAFKA_INTER_BROKER_LISTENER_NAME: "INSIDE"
      #KAFKA_ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TOPIC_AUTO_CREATE: 1
      TOPIC_AUTO_CREATE: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: "ERROR"
      KAFKA_TOOLS_LOG4J_LOGLEVEL: "ERROR"
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 15048576
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 15048576
      KAFKA_CONSUMER_FETCH_MESSAGE_BYTES: 15048576
      CONNECT_MAX_REQUEST_SIZE: 15048576


  connect:
    image: confluentinc/cp-kafka-connect:5.0.0
    hostname: connect
    depends_on:
      # - webservice
      - zookeeper
      - kafka
      # - schema_registry
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      #CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      #CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:8081'
      #CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      #CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      #CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema_registry:8081'
      # CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      # CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PRODUCER_COMPRESSION_TYPE: "snappy"
      CONNECT_PLUGIN_PATH: /jars
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 15048576
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 15048576
      CONNECT_MAX_REQUEST_SIZE: 15048576
      # CONNECT_LOG4J_ROOT_LOGLEVEL: "WARN"
      # CONNECT_TOOLS_LOG4J_LOGLEVEL: "ERROR"
    volumes:
      - ./jars:/jars
      - ./config:/config
